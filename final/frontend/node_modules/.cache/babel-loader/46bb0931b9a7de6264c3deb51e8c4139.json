{"ast":null,"code":"var _jsxFileName = \"/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Input, Modal, Form, Tabs } from 'antd';\nimport Title from '../Components/Title';\nimport Message from '../Components/Message';\nimport { ChatBoxMessages } from '../Components/ChatBoxMessages';\nimport { useQuery } from '@apollo/client';\nimport { FRIENDS_QUERY } from '../graphql/queries';\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst chatboxnamedecompose = chatBoxName => {\n  let tmp = chatBoxName.split('_');\n  return tmp;\n};\n\nconst ChatRoom = props => {\n  _s();\n\n  const {\n    chatwparticular,\n    setChatlistdata,\n    setChatwparticular,\n    sendMessage,\n    username,\n    body,\n    setBody,\n    displayStatus,\n    chatBoxName,\n    setChatBoxName\n  } = props;\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(FRIENDS_QUERY, {\n    variables: {\n      username\n    }\n  });\n\n  const onFinish = values => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * max);\n  };\n\n  const urls = [`url(\"https://news.aut.ac.nz/__data/assets/image/0004/371569/bubbles-850x567.jpg\")`, `url(\"https://d25tv1xepz39hi.cloudfront.net/2020-06-01/files/natural-light-sunset-beach_2044-tb.jpg\")`, `url(\"https://365psd.com/images/previews/dcf/psd-water-bubbles-56305.jpg\")`];\n  const [back_pic, setBack_pic] = useState(urls[0]);\n\n  const change_page = () => {\n    var temp = getRandomInt(3);\n    console.log();\n    setBack_pic(urls[temp]);\n    console.log(back_pic);\n  };\n\n  let two = chatboxnamedecompose(chatBoxName);\n  const anotherUser = two[0] === username ? two[1] : two[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      backgroundImage: back_pic,\n      backgroundSize: 'cover'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: anotherUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        danger: true,\n        onClick: () => {\n          setChatwparticular(false);\n          setChatBoxName('');\n          change_page();\n        },\n        children: \"back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatBoxMessages, {\n      className: \"chat\",\n      username: username,\n      chatBoxName: chatBoxName,\n      chatwparticular: chatwparticular\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      style: {\n        width: '50vw'\n      },\n      enterButton: \"Send\",\n      placeholder: \"Type a message here...\",\n      value: body,\n      onChange: e => setBody(e.target.value),\n      onSearch: async msg => {\n        if (!msg) {\n          displayStatus({\n            status: 'Failed',\n            message: 'Please enter a message body.'\n          });\n          return;\n        }\n\n        let twonames = chatboxnamedecompose(chatBoxName);\n        const receiver = twonames[0] === username ? twonames[1] : twonames[0];\n        await sendMessage({\n          variables: {\n            from: username,\n            to: receiver,\n            message: msg\n          }\n        }); //         setBody('');\n        //         refetch()\n        //         if (data) {\n        //         let tmp = data.friends.map(i => {return {...i}})\n        //         tmp.forEach((i)=>{i.unreadDot = false});    \n        //         setChatlistdata(tmp)\n        //         //console.log('in chatroom useeffect',data.friends)\n        // }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatRoom, \"hiQlCTePMVg81/2hS4LW4qkNha0=\", false, function () {\n  return [useQuery];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/ChatRoom.js"],"names":["Button","Input","Modal","Form","Tabs","Title","Message","ChatBoxMessages","useQuery","FRIENDS_QUERY","useState","chatboxnamedecompose","chatBoxName","tmp","split","ChatRoom","props","chatwparticular","setChatlistdata","setChatwparticular","sendMessage","username","body","setBody","displayStatus","setChatBoxName","loading","error","data","refetch","variables","onFinish","values","console","log","onFinishFailed","errorInfo","getRandomInt","max","Math","floor","random","urls","back_pic","setBack_pic","change_page","temp","two","anotherUser","width","height","backgroundImage","backgroundSize","e","target","value","msg","status","message","twonames","receiver","from","to"],"mappings":"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","sourcesContent":["import { Button, Input, Modal, Form, Tabs} from 'antd';\nimport Title from '../Components/Title';\nimport Message from '../Components/Message';\nimport { ChatBoxMessages } from '../Components/ChatBoxMessages';\nimport { useQuery } from '@apollo/client';\nimport { FRIENDS_QUERY } from '../graphql/queries';\nimport { useState } from 'react';\nimport './App.css'\n\nconst chatboxnamedecompose = (chatBoxName) => {\n    let tmp = chatBoxName.split('_')\n    return tmp\n}\n\nconst ChatRoom = (props) => {\n    const { chatwparticular ,setChatlistdata, setChatwparticular, sendMessage, username, body, setBody, displayStatus, \n         chatBoxName, setChatBoxName} = props;\n    \n    const { loading, error, data,refetch} = useQuery(FRIENDS_QUERY, {variables:{username}});\n\n    const onFinish = (values) => {\n        console.log('Success:', values);\n    };\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const getRandomInt = (max) => {\n        return Math.floor(Math.random() * max);\n      }\n\n    const urls = [`url(\"https://news.aut.ac.nz/__data/assets/image/0004/371569/bubbles-850x567.jpg\")`,\n    `url(\"https://d25tv1xepz39hi.cloudfront.net/2020-06-01/files/natural-light-sunset-beach_2044-tb.jpg\")`\n,`url(\"https://365psd.com/images/previews/dcf/psd-water-bubbles-56305.jpg\")`]\n\n    const [back_pic, setBack_pic] = useState(urls[0]);\n\n    const change_page = () => {\n        var temp = getRandomInt(3);\n        console.log()\n        setBack_pic(urls[temp]);\n        console.log(back_pic);\n    }\n\n    let two = chatboxnamedecompose(chatBoxName)\n    const anotherUser = two[0] === username ? two[1] :two[0]\n\n    return (\n        <div style={{width: \"100%\",\n        height: \"100%\", backgroundImage: back_pic,\n        backgroundSize: 'cover'}}>\n        <Title>\n            <h1>{anotherUser}</h1>\n            <Button type=\"primary\" danger onClick={()=>{   \n                setChatwparticular(false);\n                setChatBoxName('');\n                change_page();\n            }}>\n            back\n            </Button>\n        </Title>\n        <ChatBoxMessages className=\"chat\" username = {username} chatBoxName = {chatBoxName} chatwparticular = {chatwparticular}/>\n        <Input.Search\n        style={{width: '50vw'}}\n            enterButton=\"Send\"\n            placeholder=\"Type a message here...\"\n            value={body}\n            onChange={(e) => setBody(e.target.value)}\n            onSearch={async (msg) => {\n                if (!msg) {\n                    displayStatus({\n                        status: 'Failed',\n                        message: 'Please enter a message body.'\n                    });\n                    return;\n                }\n                let twonames = chatboxnamedecompose(chatBoxName)\n                const receiver = twonames[0] === username?twonames[1]:twonames[0]\n                await sendMessage({\n                    variables: {\n                        from: username,\n                        to: receiver,\n                        message: msg\n                    },\n                });\n        //         setBody('');\n\n        //         refetch()\n        //         if (data) {\n        //         let tmp = data.friends.map(i => {return {...i}})\n        //         tmp.forEach((i)=>{i.unreadDot = false});    \n        //         setChatlistdata(tmp)\n        //         //console.log('in chatroom useeffect',data.friends)\n        // }\n            }}\n        ></Input.Search>\n        </div>\n    )\n}\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}