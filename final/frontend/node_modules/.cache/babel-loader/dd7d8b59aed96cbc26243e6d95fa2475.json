{"ast":null,"code":"var _jsxFileName = \"/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport './index.css';\nimport App from './Containers/App';\nimport 'antd/dist/antd.min.css'; // Create an http link:\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:5000/'\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/`,\n  options: {\n    reconnect: true\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/index.js"],"names":["React","ReactDOM","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","split","WebSocketLink","getMainDefinition","App","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,QAKO,gBALP;AAMA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,wBAAP,C,CAEA;;;AACA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,IAAIL,aAAJ,CAAkB;AAC/BI,EAAAA,GAAG,EAAG,sBADyB;AAE/BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFsB,CAAlB,CAAf,C,CAKA;AACA;;AACA,MAAMC,IAAI,GAAGT,KAAK,EAChB;AACA,QAAe;AAAA,MAAd;AAAEU,IAAAA;AAAF,GAAc;AACb,QAAMC,UAAU,GAAGT,iBAAiB,CAACQ,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CARe,EAShBP,MATgB,EAUhBF,QAVgB,CAAlB;AAaA,MAAMU,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC9Ba,EAAAA,IAD8B;AAE9BM,EAAAA,KAAK,EAAE,IAAIlB,aAAJ,GAAoBmB,OAApB,CAA4B,EAA5B;AAFuB,CAAjB,CAAf;AAKArB,QAAQ,CAACsB,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport './index.css'\nimport App from './Containers/App'\nimport 'antd/dist/antd.min.css'\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:5000/',\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/`,\n  options: { reconnect: true },\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({}),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"]},"metadata":{},"sourceType":"module"}