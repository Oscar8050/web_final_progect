{"ast":null,"code":"var _jsxFileName = \"/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { message as popUpMessage, Input } from 'antd';\nimport styled from 'styled-components';\nimport useChat from '../Hooks/useChat';\nimport ChatRoom from './ChatRoom'; //import Tabs from './Tab';\n\nimport { LOGIN, SIGNUP, CREATE_CHATBOX, CREATE_MESSAGE } from '../graphql/inedx';\nimport ChatList from './ChatList.js';\nimport { FRIENDS_QUERY } from '../graphql/inedx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    width: 500px;\n    margin: auto;\n    overflow:hidden;\n    text-overflow:ellipsis;\n`;\nconst LOCALSTORAGE_KEY = \"save-username\";\nconst signIn_Key = \"signIn\";\n\nfunction App() {\n  _s();\n\n  const savedUsername = localStorage.getItem(LOCALSTORAGE_KEY);\n  const isSignIn = JSON.parse(localStorage.getItem(signIn_Key)); //localStorage is string fku\n\n  const {\n    logOut,\n    isModalVisible,\n    anotherUser,\n    setAnotherUser,\n    handleOk,\n    handleCancel,\n    activeKey,\n    panes,\n    onChange,\n    onEdit,\n    add\n  } = useChat();\n  const [username, setUsername] = useState(savedUsername || \"\");\n  const [hashedPassword, setHashedPassword] = useState(\"\");\n  const [body, setBody] = useState(''); // textBody\n\n  const [signedIn, setSignedIn] = useState(isSignIn || false);\n  /*############################################################################*/\n\n  /*############################################################################*/\n\n  /*############################################################################*/\n\n  const [chatwparticular, setChatwparticular] = useState(false);\n  const [chatBoxName, setChatBoxName] = useState('');\n  const [chatlistdata, setChatlistdata] = useState([]); // 弄個SETANOTHERUSER出來\n\n  const [currentUser, setCurrentUser] = useState('123');\n  const [inin, setInin] = useState(false);\n  const [loginname, setLoginname] = useState('');\n  const [login, {\n    loading: loginLoading,\n    error: loginError,\n    data: loginData\n  }] = useMutation(LOGIN);\n  const [signUp, {\n    loading: signUpLoading,\n    error: signUpError,\n    data: signUpData\n  }] = useMutation(SIGNUP);\n  const [createChatBox, {\n    loading: createChatBoxLoading,\n    error: createChatBoxError,\n    data: createChatBoxData\n  }] = useMutation(CREATE_CHATBOX);\n  const [sendMessage, {\n    loading: sendMessageLoading,\n    error: sendMessageError,\n    data: sendMessageData\n  }] = useMutation(CREATE_MESSAGE);\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(FRIENDS_QUERY, {\n    variables: {\n      username: currentUser\n    }\n  });\n\n  const displayStatus = payload => {\n    // console.log(payload)\n    if (payload.message) {\n      const {\n        status,\n        message\n      } = payload;\n      const content = {\n        content: message,\n        duration: 1\n      };\n\n      switch (status) {\n        case 'Success':\n          if (message === 'Login Success') {\n            setSignedIn(true);\n          }\n\n          popUpMessage.success(content);\n          break;\n\n        case 'Failed':\n          popUpMessage.error(content);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }; // useEffect(() => {\n  //     refetch()\n  //     if (data) {\n  //     let tmp = data.friends.map(i => {return {...i}})\n  //     tmp.forEach((i)=>{i.unreadDot = false});\n  //     setChatlistdata(tmp)\n  //       //console.log('in useeffect',data.friends)\n  //     }\n  //   }, [chatwparticular,inin])\n  // useEffect(() => { \n  //     if(!signUpLoading&& !signUpError && signUpData!==undefined){\n  //         displayStatus(signUpData.signUp)\n  //     }\n  // }, [signUpLoading, signUpError, signUpData]);\n  // useEffect(() => { \n  //     if(!loginLoading&& !loginError && loginData!==undefined){\n  //         displayStatus(loginData.login)\n  //     }\n  // }, [loginLoading, loginError, loginData]);\n  // useEffect(() => { \n  //     if(!createChatBoxLoading&& !createChatBoxError && createChatBoxData!==undefined){\n  //         displayStatus(createChatBoxData.createChatBox.response);\n  //         if(createChatBoxData.createChatBox.response.status === 'Success'){\n  //             handleOk();\n  //             add(createChatBoxData.createChatBox.chatBox.name);\n  //         }\n  //     }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [createChatBoxLoading, createChatBoxError, createChatBoxData]);\n  // useEffect(() => { \n  //     if(!sendMessageLoading&& !sendMessageError && sendMessageData!==undefined){\n  //         displayStatus(sendMessageData.createMessage.response)\n  //     }\n  // }, [sendMessageLoading, sendMessageError, sendMessageData]);\n  // useEffect(() => {\n  //     if (signedIn) {\n  //         localStorage.setItem(LOCALSTORAGE_KEY, username);\n  //         localStorage.setItem(signIn_Key, true);\n  //     }else{\n  //         localStorage.setItem(signIn_Key, false);\n  //     }\n  // }, [signedIn, username]\n  // );\n\n\n  return (\n    /*#__PURE__*/\n    // <Wrapper>\n    //     {!signedIn? \n    //     <Tabs setSignedIn = {setSignedIn} sendLogin = {login} sendSignUp = {signUp} username = {username} setUsername = {setUsername} hashedPassword = {hashedPassword} setHashedPassword = {setHashedPassword}/>:\n    //     <ChatRoom setSignedIn = {setSignedIn} createChatBox = {createChatBox} sendMessage = {sendMessage} username = {username} body = {body} setBody = {setBody} displayStatus = {displayStatus}\n    //     isModalVisible = {isModalVisible} anotherUser = {anotherUser} setAnotherUser = {setAnotherUser} handleCancel = {handleCancel} activeKey = {activeKey} panes = {panes} onChange = {onChange} onEdit = {onEdit} logOut = {logOut}\n    //     />}\n    // </Wrapper>\n    _jsxDEV(\"div\", {\n      style: {\n        backgroundImage: `url(\"https://theboywithahat.files.wordpress.com/2016/03/soap-bubble-826018_960_720.jpg\")`,\n        backgroundSize: 'cover'\n      },\n      children: !inin ? /*#__PURE__*/_jsxDEV(Input.Search, {\n        enterButton: \"Send\",\n        placeholder: \"Type username here...\",\n        autoFocus: true,\n        value: loginname,\n        onChange: e => setLoginname(e.target.value),\n        onSearch: () => {\n          setInin(true);\n          setCurrentUser(loginname);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this) : !chatwparticular ? /*#__PURE__*/_jsxDEV(ChatList, {\n        chatlistdata: chatlistdata,\n        setChatlistdata: setChatlistdata,\n        chatwparticular: chatwparticular,\n        setChatwparticular: setChatwparticular,\n        setChatBoxName: setChatBoxName,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(ChatRoom, {\n        chatwparticular: chatwparticular,\n        setChatlistdata: setChatlistdata,\n        setChatwparticular: setChatwparticular,\n        sendMessage: sendMessage,\n        username: currentUser,\n        body: body,\n        setBody: setBody,\n        displayStatus: displayStatus,\n        chatBoxName: chatBoxName,\n        setChatBoxName: setChatBoxName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(App, \"0D2yzLoGbDXSE8ikgG0cO2YCeWU=\", false, function () {\n  return [useChat, useMutation, useMutation, useMutation, useMutation, useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/App.js"],"names":["useState","useEffect","useMutation","useQuery","message","popUpMessage","Input","styled","useChat","ChatRoom","LOGIN","SIGNUP","CREATE_CHATBOX","CREATE_MESSAGE","ChatList","FRIENDS_QUERY","Wrapper","div","LOCALSTORAGE_KEY","signIn_Key","App","savedUsername","localStorage","getItem","isSignIn","JSON","parse","logOut","isModalVisible","anotherUser","setAnotherUser","handleOk","handleCancel","activeKey","panes","onChange","onEdit","add","username","setUsername","hashedPassword","setHashedPassword","body","setBody","signedIn","setSignedIn","chatwparticular","setChatwparticular","chatBoxName","setChatBoxName","chatlistdata","setChatlistdata","currentUser","setCurrentUser","inin","setInin","loginname","setLoginname","login","loading","loginLoading","error","loginError","data","loginData","signUp","signUpLoading","signUpError","signUpData","createChatBox","createChatBoxLoading","createChatBoxError","createChatBoxData","sendMessage","sendMessageLoading","sendMessageError","sendMessageData","refetch","variables","displayStatus","payload","status","content","duration","success","backgroundImage","backgroundSize","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {message as popUpMessage, Input} from 'antd';\nimport styled from 'styled-components';\nimport useChat from '../Hooks/useChat';\nimport ChatRoom from './ChatRoom';\n//import Tabs from './Tab';\nimport {\n    LOGIN,\n    SIGNUP,\n    CREATE_CHATBOX,\n    CREATE_MESSAGE,\n} from '../graphql/inedx';\nimport ChatList from './ChatList.js';\nimport { FRIENDS_QUERY} from '../graphql/inedx';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    width: 500px;\n    margin: auto;\n    overflow:hidden;\n    text-overflow:ellipsis;\n`;\n\nconst LOCALSTORAGE_KEY = \"save-username\";\nconst signIn_Key = \"signIn\";\n\nfunction App() {\n    const savedUsername = localStorage.getItem(LOCALSTORAGE_KEY);\n    const isSignIn = JSON.parse(localStorage.getItem(signIn_Key));//localStorage is string fku\n    const { logOut, isModalVisible, anotherUser, setAnotherUser, handleOk, handleCancel, activeKey, panes, onChange, onEdit, add} = useChat();\n    const [username, setUsername] = useState(savedUsername || \"\");\n    const [hashedPassword, setHashedPassword] = useState(\"\");\n    const [body, setBody] = useState('')  // textBody\n    const [signedIn, setSignedIn] = useState(isSignIn || false);\n    /*############################################################################*/\n    /*############################################################################*/\n    /*############################################################################*/\n    const [chatwparticular,setChatwparticular] = useState(false)\n    const [chatBoxName, setChatBoxName] = useState('')\n    const [chatlistdata, setChatlistdata] = useState([])\n    // 弄個SETANOTHERUSER出來\n    const [currentUser, setCurrentUser] = useState('123')\n    const [inin, setInin] = useState(false)\n    const [loginname, setLoginname] = useState('')\n\n    const [login, {loading: loginLoading, error: loginError, data: loginData}] = useMutation(LOGIN);\n    const [signUp, {loading: signUpLoading, error: signUpError, data: signUpData}] = useMutation(SIGNUP);\n    const [createChatBox, {loading: createChatBoxLoading, error: createChatBoxError, data: createChatBoxData}] = useMutation(CREATE_CHATBOX);\n    const [sendMessage, {loading: sendMessageLoading, error: sendMessageError, data: sendMessageData}] = useMutation(CREATE_MESSAGE);\n    const { loading, error, data,refetch} = useQuery(FRIENDS_QUERY, {variables:{username: currentUser}});\n\n    const displayStatus = (payload) => {\n        // console.log(payload)\n        if (payload.message) {\n            const { status, message } = payload;\n            const content = { content: message, duration: 1 };\n            switch (status) {\n                case 'Success':\n                    if(message === 'Login Success'){\n                        setSignedIn(true);\n                    }\n                    popUpMessage.success(content);\n                    break;\n                case 'Failed':\n                    popUpMessage.error(content);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    // useEffect(() => {\n    //     refetch()\n    //     if (data) {\n    //     let tmp = data.friends.map(i => {return {...i}})\n    //     tmp.forEach((i)=>{i.unreadDot = false});\n    //     setChatlistdata(tmp)\n    //       //console.log('in useeffect',data.friends)\n    //     }\n    //   }, [chatwparticular,inin])\n    // useEffect(() => { \n    //     if(!signUpLoading&& !signUpError && signUpData!==undefined){\n    //         displayStatus(signUpData.signUp)\n    //     }\n    // }, [signUpLoading, signUpError, signUpData]);\n    // useEffect(() => { \n    //     if(!loginLoading&& !loginError && loginData!==undefined){\n    //         displayStatus(loginData.login)\n    //     }\n    // }, [loginLoading, loginError, loginData]);\n    // useEffect(() => { \n    //     if(!createChatBoxLoading&& !createChatBoxError && createChatBoxData!==undefined){\n    //         displayStatus(createChatBoxData.createChatBox.response);\n    //         if(createChatBoxData.createChatBox.response.status === 'Success'){\n    //             handleOk();\n    //             add(createChatBoxData.createChatBox.chatBox.name);\n    //         }\n    //     }\n    // // eslint-disable-next-line react-hooks/exhaustive-deps\n    // }, [createChatBoxLoading, createChatBoxError, createChatBoxData]);\n    // useEffect(() => { \n    //     if(!sendMessageLoading&& !sendMessageError && sendMessageData!==undefined){\n    //         displayStatus(sendMessageData.createMessage.response)\n    //     }\n    // }, [sendMessageLoading, sendMessageError, sendMessageData]);\n    // useEffect(() => {\n    //     if (signedIn) {\n    //         localStorage.setItem(LOCALSTORAGE_KEY, username);\n    //         localStorage.setItem(signIn_Key, true);\n    //     }else{\n    //         localStorage.setItem(signIn_Key, false);\n    //     }\n    // }, [signedIn, username]\n    // );\n    \n    return (\n        // <Wrapper>\n        //     {!signedIn? \n        //     <Tabs setSignedIn = {setSignedIn} sendLogin = {login} sendSignUp = {signUp} username = {username} setUsername = {setUsername} hashedPassword = {hashedPassword} setHashedPassword = {setHashedPassword}/>:\n        //     <ChatRoom setSignedIn = {setSignedIn} createChatBox = {createChatBox} sendMessage = {sendMessage} username = {username} body = {body} setBody = {setBody} displayStatus = {displayStatus}\n        //     isModalVisible = {isModalVisible} anotherUser = {anotherUser} setAnotherUser = {setAnotherUser} handleCancel = {handleCancel} activeKey = {activeKey} panes = {panes} onChange = {onChange} onEdit = {onEdit} logOut = {logOut}\n        //     />}\n        // </Wrapper>\n        \n        <div style={{ \n        \n          backgroundImage: `url(\"https://theboywithahat.files.wordpress.com/2016/03/soap-bubble-826018_960_720.jpg\")`,\n          backgroundSize: 'cover'\n        }}>\n            {!inin?\n            <Input.Search\n            enterButton=\"Send\"\n            placeholder=\"Type username here...\"\n            autoFocus = {true}\n            value={loginname}\n            onChange={(e) => setLoginname(e.target.value)}\n            onSearch={()=>{\n                setInin(true)\n                setCurrentUser(loginname)\n            }}\n        ></Input.Search>:\n                !chatwparticular?\n                <ChatList chatlistdata = {chatlistdata} setChatlistdata = {setChatlistdata} chatwparticular = {chatwparticular} setChatwparticular = {setChatwparticular} setChatBoxName = {setChatBoxName} currentUser = {currentUser}/>:\n                <ChatRoom chatwparticular = {chatwparticular} setChatlistdata = {setChatlistdata} setChatwparticular = {setChatwparticular} sendMessage = {sendMessage} username = {currentUser} body = {body} setBody = {setBody} displayStatus = {displayStatus}\n                chatBoxName = {chatBoxName} setChatBoxName = {setChatBoxName}\n                />\n            }\n        </div>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}