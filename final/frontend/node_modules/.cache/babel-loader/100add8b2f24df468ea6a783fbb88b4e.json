{"ast":null,"code":"var _jsxFileName = \"/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/ChatList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport 'react-chat-elements/dist/main.css';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { ConversationList, Conversation, Avatar } from \"@chatscope/chat-ui-kit-react\";\nimport { format } from 'timeago.js';\nimport { useQuery } from '@apollo/client';\nimport { FRIENDS_QUERY } from '../graphql/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(_ref => {\n  _s();\n\n  let {\n    chatwparticular,\n    setChatwparticular,\n    setChatBoxName,\n    currentUser,\n    chatlistdata,\n    setChatlistdata\n  } = _ref;\n  const [friendsInfo, setFriendsInfo] = useState([]); //const [toinit,setToinit] = useState(false)\n\n  const makeName = (name1, name2) => {\n    return [name1, name2].sort().join('_');\n  };\n\n  const chatBoxName = makeName(\"123\", \"456\"); //const { loading, error, data, subscribeToMore } = useQuery(FRIENDS_QUERY, {variables:{username: currentUser}});\n  // const onClick = (e,friendName) => {\n  //     // setChatwparticular(true)\n  //     // setChatBoxName(makeName())\n  //     console.log(e.target)\n  // }\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(FRIENDS_QUERY, {\n    variables: {\n      username: currentUser\n    },\n    pollInterval: 500\n  });\n  useEffect(() => {\n    try {\n      //let difference = data.friends.filter((i)=>chatlistdata.includes({lastmsg:i.lastmsg}))\n      console.log(\"data.friends : \", data.friends);\n      console.log(\"chatlistdata : \", chatlistdata); //console.log('difference : ',difference)\n      //let tmp = data.friends.map(i => {return {...i}})\n      //let tmp2 = data.friends.map((i)=>{return  [i.friendName, i.lastmsg]})\n\n      let tmp = [];\n\n      for (let i = 0; i < data.friends.length; ++i) {\n        tmp.push([data.friends[i].friendName, data.friends[i].lastmsg.sender.username, data.friends[i].lastmsg.body]);\n      }\n\n      console.log(tmp); // tmp.forEach(element => {\n      //   return {friendName: element.friendName, lastmsg: element.lastmsg}\n      // });\n      //console.log('tmp2 : ',tmp2[0])\n      //tmp.forEach(i => {i.[[Prototype]]});\n\n      setChatlistdata(data.friends);\n    } catch (e) {}\n  }, [data]);\n  return (\n    /*#__PURE__*/\n    // <ChatList \n    //     className = 'Chat_List'\n    //     dataSource = {datalist} \n    //     onClick = {onClick}\n    // /> \n    _jsxDEV(\"div\", {\n      style: {\n        height: \"340px\",\n        width: \"340px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ConversationList, {\n        children: chatlistdata.map((_ref2, i) => {\n          let {\n            friendName,\n            lastmsg\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Conversation, {\n            name: friendName,\n            lastSenderName: lastmsg.sender.username,\n            info: lastmsg.body,\n            onClick: () => {\n              setChatBoxName(makeName(currentUser, friendName));\n              setChatwparticular(true);\n            },\n            lastActivityTime: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"teal\"\n              },\n              children: format(lastmsg.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 55\n            }, this),\n            unreadDot: i % 2 ? true : false\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  );\n}, \"UFlNtgmhjor5tz5XkEgSdmm5b+0=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/src/Containers/ChatList.js"],"names":["useEffect","useState","styles","ConversationList","Conversation","Avatar","format","useQuery","FRIENDS_QUERY","chatwparticular","setChatwparticular","setChatBoxName","currentUser","chatlistdata","setChatlistdata","friendsInfo","setFriendsInfo","makeName","name1","name2","sort","join","chatBoxName","loading","error","data","variables","username","pollInterval","console","log","friends","tmp","i","length","push","friendName","lastmsg","sender","body","e","height","width","map","color","timestamp"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport 'react-chat-elements/dist/main.css';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {ConversationList, Conversation,Avatar} from \"@chatscope/chat-ui-kit-react\";\nimport {format,} from'timeago.js';\nimport { useQuery } from '@apollo/client';\nimport { FRIENDS_QUERY } from '../graphql/queries';\n\n\nexport default ({chatwparticular, setChatwparticular, setChatBoxName, currentUser, chatlistdata, setChatlistdata}) => {\n    const [friendsInfo,setFriendsInfo] = useState([])\n    //const [toinit,setToinit] = useState(false)\n    const makeName = (name1, name2) => {\n        return [name1, name2].sort().join('_');\n    };\n    const chatBoxName = makeName(\"123\",\"456\")\n    \n    //const { loading, error, data, subscribeToMore } = useQuery(FRIENDS_QUERY, {variables:{username: currentUser}});\n    \n    \n    // const onClick = (e,friendName) => {\n    //     // setChatwparticular(true)\n    //     // setChatBoxName(makeName())\n    //     console.log(e.target)\n    // }\n    const { loading, error, data} = useQuery(FRIENDS_QUERY, {variables:{username: currentUser}, pollInterval:500});\n    useEffect(()=>{\n      try{\n        //let difference = data.friends.filter((i)=>chatlistdata.includes({lastmsg:i.lastmsg}))\n        console.log(\"data.friends : \",data.friends)\n        console.log(\"chatlistdata : \", chatlistdata)\n        //console.log('difference : ',difference)\n        //let tmp = data.friends.map(i => {return {...i}})\n        //let tmp2 = data.friends.map((i)=>{return  [i.friendName, i.lastmsg]})\n        let tmp = []\n        for(let i = 0; i < data.friends.length; ++i){\n          tmp.push([data.friends[i].friendName, data.friends[i].lastmsg.sender.username, data.friends[i].lastmsg.body])\n        }\n        console.log(tmp)\n        // tmp.forEach(element => {\n        //   return {friendName: element.friendName, lastmsg: element.lastmsg}\n        // });\n        //console.log('tmp2 : ',tmp2[0])\n        //tmp.forEach(i => {i.[[Prototype]]});\n        setChatlistdata(data.friends)\n      }\n      catch(e){}\n    },[data])\n    return(\n        // <ChatList \n        //     className = 'Chat_List'\n        //     dataSource = {datalist} \n        //     onClick = {onClick}\n        // /> \n        \n        <div style={{\n            height: \"340px\",\n            width: \"340px\"\n          }}>\n                <ConversationList>        \n                  {/* <Conversation name=\"Lilly\" lastSenderName=\"Lilly\" info=\"Yes i can do it for you\" >\n                    <Avatar src={null} name=\"Lilly\" />\n                  </Conversation> */}\n                   {\n                      chatlistdata.map(({friendName, lastmsg},i)=>\n                        {\n                        return (\n                        <Conversation key = {i} name={friendName} lastSenderName={lastmsg.sender.username} \n                                    info = {lastmsg.body} \n                                    onClick = {() => {\n                                        setChatBoxName(makeName(currentUser,friendName))\n                                        setChatwparticular(true)\n                                    }} \n                                    lastActivityTime={<span style={{\n                                        color: \"teal\"\n                                      }}>{format(lastmsg.timestamp)}</span>} unreadDot = {i%2?true:false}>\n                            {/* <Avatar src={null} name={friendName} /> */}\n                        </Conversation>)\n                        }\n                      )\n                  }                  \n                </ConversationList>\n              </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}