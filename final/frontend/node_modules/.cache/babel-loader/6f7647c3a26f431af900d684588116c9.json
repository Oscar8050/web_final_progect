{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { toPathKey } from '../utils/commonUtil';\nimport { useBaseProps } from 'rc-select';\nexport default (function (ref, options, fieldNames, activeValueCells, setActiveValueCells, containerRef, onKeyBoardSelect) {\n  var _useBaseProps = useBaseProps(),\n      direction = _useBaseProps.direction,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open;\n\n  var rtl = direction === 'rtl';\n\n  var _React$useMemo = React.useMemo(function () {\n    var activeIndex = -1;\n    var currentOptions = options;\n    var mergedActiveIndexes = [];\n    var mergedActiveValueCells = [];\n    var len = activeValueCells.length; // Fill validate active value cells and index\n\n    var _loop = function _loop(i) {\n      // Mark the active index for current options\n      var nextActiveIndex = currentOptions.findIndex(function (option) {\n        return option[fieldNames.value] === activeValueCells[i];\n      });\n\n      if (nextActiveIndex === -1) {\n        return \"break\";\n      }\n\n      activeIndex = nextActiveIndex;\n      mergedActiveIndexes.push(activeIndex);\n      mergedActiveValueCells.push(activeValueCells[i]);\n      currentOptions = currentOptions[activeIndex][fieldNames.children];\n    }; // Fill validate active value cells and index\n\n\n    for (var i = 0; i < len; i += 1) {\n      var _ret = _loop(i);\n\n      if (_ret === \"break\") break;\n    } // Fill last active options\n    // Fill last active options\n\n\n    var activeOptions = options;\n\n    for (var _i = 0; _i < mergedActiveIndexes.length - 1; _i += 1) {\n      activeOptions = activeOptions[mergedActiveIndexes[_i]][fieldNames.children];\n    }\n\n    return [mergedActiveValueCells, activeIndex, activeOptions];\n  }, [activeValueCells, fieldNames, options]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      validActiveValueCells = _React$useMemo2[0],\n      lastActiveIndex = _React$useMemo2[1],\n      lastActiveOptions = _React$useMemo2[2]; // Update active value cells and scroll to target element\n\n\n  var internalSetActiveValueCells = function internalSetActiveValueCells(next) {\n    var _containerRef$current, _ele$scrollIntoView;\n\n    setActiveValueCells(next);\n    var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-path-key=\\\"\".concat(toPathKey(next), \"\\\"]\"));\n    ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n      block: 'nearest'\n    });\n  }; // Same options offset\n\n\n  var offsetActiveOption = function offsetActiveOption(offset) {\n    var len = lastActiveOptions.length;\n    var currentIndex = lastActiveIndex;\n\n    if (currentIndex === -1 && offset < 0) {\n      currentIndex = len;\n    }\n\n    for (var i = 0; i < len; i += 1) {\n      currentIndex = (currentIndex + offset + len) % len;\n      var option = lastActiveOptions[currentIndex];\n\n      if (option && !option.disabled) {\n        var value = option[fieldNames.value];\n        var nextActiveCells = validActiveValueCells.slice(0, -1).concat(value);\n        internalSetActiveValueCells(nextActiveCells);\n        return;\n      }\n    }\n  }; // Different options offset\n\n\n  var prevColumn = function prevColumn() {\n    if (validActiveValueCells.length > 1) {\n      var nextActiveCells = validActiveValueCells.slice(0, -1);\n      internalSetActiveValueCells(nextActiveCells);\n    } else {\n      toggleOpen(false);\n    }\n  };\n\n  var nextColumn = function nextColumn() {\n    var _lastActiveOptions$la;\n\n    var nextOptions = ((_lastActiveOptions$la = lastActiveOptions[lastActiveIndex]) === null || _lastActiveOptions$la === void 0 ? void 0 : _lastActiveOptions$la[fieldNames.children]) || [];\n    var nextOption = nextOptions.find(function (option) {\n      return !option.disabled;\n    });\n\n    if (nextOption) {\n      var nextActiveCells = [].concat(_toConsumableArray(validActiveValueCells), [nextOption[fieldNames.value]]);\n      internalSetActiveValueCells(nextActiveCells);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                offsetActiveOption(offset);\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              if (validActiveValueCells.length) {\n                onKeyBoardSelect(validActiveValueCells, lastActiveOptions[lastActiveIndex]);\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  });\n});","map":{"version":3,"sources":["/Users/xujinting/Desktop/web_final_main/web_final_progect/final/frontend/node_modules/rc-cascader/es/OptionList/useKeyboard.js"],"names":["_toConsumableArray","_slicedToArray","React","KeyCode","toPathKey","useBaseProps","ref","options","fieldNames","activeValueCells","setActiveValueCells","containerRef","onKeyBoardSelect","_useBaseProps","direction","searchValue","toggleOpen","open","rtl","_React$useMemo","useMemo","activeIndex","currentOptions","mergedActiveIndexes","mergedActiveValueCells","len","length","_loop","i","nextActiveIndex","findIndex","option","value","push","children","_ret","activeOptions","_i","_React$useMemo2","validActiveValueCells","lastActiveIndex","lastActiveOptions","internalSetActiveValueCells","next","_containerRef$current","_ele$scrollIntoView","ele","current","querySelector","concat","scrollIntoView","call","block","offsetActiveOption","offset","currentIndex","disabled","nextActiveCells","slice","prevColumn","nextColumn","_lastActiveOptions$la","nextOptions","nextOption","find","useImperativeHandle","onKeyDown","event","which","UP","DOWN","LEFT","RIGHT","BACKSPACE","ENTER","ESC","stopPropagation","onKeyUp"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { toPathKey } from '../utils/commonUtil';\nimport { useBaseProps } from 'rc-select';\nexport default (function (ref, options, fieldNames, activeValueCells, setActiveValueCells, containerRef, onKeyBoardSelect) {\n  var _useBaseProps = useBaseProps(),\n      direction = _useBaseProps.direction,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open;\n\n  var rtl = direction === 'rtl';\n\n  var _React$useMemo = React.useMemo(function () {\n    var activeIndex = -1;\n    var currentOptions = options;\n    var mergedActiveIndexes = [];\n    var mergedActiveValueCells = [];\n    var len = activeValueCells.length; // Fill validate active value cells and index\n\n    var _loop = function _loop(i) {\n      // Mark the active index for current options\n      var nextActiveIndex = currentOptions.findIndex(function (option) {\n        return option[fieldNames.value] === activeValueCells[i];\n      });\n\n      if (nextActiveIndex === -1) {\n        return \"break\";\n      }\n\n      activeIndex = nextActiveIndex;\n      mergedActiveIndexes.push(activeIndex);\n      mergedActiveValueCells.push(activeValueCells[i]);\n      currentOptions = currentOptions[activeIndex][fieldNames.children];\n    };\n\n    // Fill validate active value cells and index\n    for (var i = 0; i < len; i += 1) {\n      var _ret = _loop(i);\n\n      if (_ret === \"break\") break;\n    } // Fill last active options\n\n\n    // Fill last active options\n    var activeOptions = options;\n\n    for (var _i = 0; _i < mergedActiveIndexes.length - 1; _i += 1) {\n      activeOptions = activeOptions[mergedActiveIndexes[_i]][fieldNames.children];\n    }\n\n    return [mergedActiveValueCells, activeIndex, activeOptions];\n  }, [activeValueCells, fieldNames, options]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      validActiveValueCells = _React$useMemo2[0],\n      lastActiveIndex = _React$useMemo2[1],\n      lastActiveOptions = _React$useMemo2[2]; // Update active value cells and scroll to target element\n\n\n  var internalSetActiveValueCells = function internalSetActiveValueCells(next) {\n    var _containerRef$current, _ele$scrollIntoView;\n\n    setActiveValueCells(next);\n    var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-path-key=\\\"\".concat(toPathKey(next), \"\\\"]\"));\n    ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n      block: 'nearest'\n    });\n  }; // Same options offset\n\n\n  var offsetActiveOption = function offsetActiveOption(offset) {\n    var len = lastActiveOptions.length;\n    var currentIndex = lastActiveIndex;\n\n    if (currentIndex === -1 && offset < 0) {\n      currentIndex = len;\n    }\n\n    for (var i = 0; i < len; i += 1) {\n      currentIndex = (currentIndex + offset + len) % len;\n      var option = lastActiveOptions[currentIndex];\n\n      if (option && !option.disabled) {\n        var value = option[fieldNames.value];\n        var nextActiveCells = validActiveValueCells.slice(0, -1).concat(value);\n        internalSetActiveValueCells(nextActiveCells);\n        return;\n      }\n    }\n  }; // Different options offset\n\n\n  var prevColumn = function prevColumn() {\n    if (validActiveValueCells.length > 1) {\n      var nextActiveCells = validActiveValueCells.slice(0, -1);\n      internalSetActiveValueCells(nextActiveCells);\n    } else {\n      toggleOpen(false);\n    }\n  };\n\n  var nextColumn = function nextColumn() {\n    var _lastActiveOptions$la;\n\n    var nextOptions = ((_lastActiveOptions$la = lastActiveOptions[lastActiveIndex]) === null || _lastActiveOptions$la === void 0 ? void 0 : _lastActiveOptions$la[fieldNames.children]) || [];\n    var nextOption = nextOptions.find(function (option) {\n      return !option.disabled;\n    });\n\n    if (nextOption) {\n      var nextActiveCells = [].concat(_toConsumableArray(validActiveValueCells), [nextOption[fieldNames.value]]);\n      internalSetActiveValueCells(nextActiveCells);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                offsetActiveOption(offset);\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              if (validActiveValueCells.length) {\n                onKeyBoardSelect(validActiveValueCells, lastActiveOptions[lastActiveIndex]);\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  });\n});"]},"metadata":{},"sourceType":"module"}